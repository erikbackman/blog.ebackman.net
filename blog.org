#+HUGO_BASE_DIR: .
#+HUGO_SECTION: posts

* Pages
:PROPERTIES:
:EXPORT_HUGO_CUSTOM_FRONT_MATTER: :noauthor true :nocomment true :nodate true :nopaging true :noread true
:EXPORT_HUGO_MENU: :menu main
:EXPORT_HUGO_SECTION: pages
:EXPORT_HUGO_WEIGHT: auto
:END:
** DONE About
:PROPERTIES:
:EXPORT_FILE_NAME: about
:END:
I'm a self-taught programmer currently working at [[https://learningwell.se][LearningWell]] in Sweden.

I would label myself as somewhat of a polyglot programmer, I love learning and getting a new perspective on things.
That said, I strongly prefer functional programming languages and in particular Haskell.
Being an avid Emacs user I also recently started to get more into lisp.

In addition to programming I enjoy reading, listening to podcasts as well as playing board- and card-games.

* Posts
** DONE Hello World!
:PROPERTIES:
:EXPORT_FILE_NAME: hello-world
:EXPORT_DATE: <2020-10-29 Thu>
:END:
This is the first of hopefully many posts to come.

I've come to realise that I spend just about as much time thinking about programming as I do
actually programming. I also love sharing these thoughts with other people, unfortunately I often end up rambling as
I try to say everything at once. By starting a blog I hope to convey my thoughts in a more well thought-out manner.
** DONE Blogging with Emacs Org-mode and ox-hugo :emacs:org:hugo:
:PROPERTIES:
:EXPORT_FILE_NAME: blogging-with-org-mode-and-ox-hugo
:EXPORT_DATE: <2020-11-18 Wed>
:END:
I love Emacs and think it's an amazing piece of software that prefectly captures
the essence of what free software is all about.

One of the most popular packages for emacs is [[https://orgmode.org][Org mode]] which is described as:
#+begin_quote
a mode for keeping notes, maintaining TODO lists, and project planning with a
fast and effective plain-text markup language. It also is an authoring system
with unique support for literate programming and reproducible research.
#+end_quote

And so naturally when I decided to start a blog I wanted to use Emacs and Org mode.
There are a few [[https://orgmode.org/tools.html][tools]] available for blogging with Org mode and I ended up going with [[https://gohugo.io][Hugo]]
and [[https://ox-hugo.scripter.co/][ox-hugo]].

Hugo already has support for Org it is however very limited support and thats
where ox-hugo comes in.
Ox-hugo is an Org exporter backend that exports Org to Hugo-compatible markdown.

*** The setup
*Project Structure*
#+begin_src bash :exports code :results code
tree -L 2 --dirsfirst
#+end_src

#+begin_src bash
.
├── content
│   ├── pages
│   └── posts
├── static
│   └── images
├── themes
│   └── m10c
├── blog.org
├── config.toml
#+end_src

This is pretty much the structure you end up with after running =hugo new=.

In the root of the project I have a file called =blog.org= which contains all my
posts as well as the pages on my blog such as the about page.

*blog.org*
#+begin_src org
,#+HUGO_BASE_DIR: .
,#+HUGO_SECTION: posts

,* Pages
:PROPERTIES:
:EXPORT_HUGO_CUSTOM_FRONT_MATTER: :noauthor true :nocomment true :nodate true :nopaging true :noread true
:EXPORT_HUGO_MENU: :menu main
:EXPORT_HUGO_SECTION: pages
:EXPORT_HUGO_WEIGHT: auto
:END:
,** DONE About
:PROPERTIES:
:EXPORT_FILE_NAME: about
:END:
I'm a self-taught programmer currently working at [[https://learningwell.se][LearningWell]] in Sweden.
...
,* Posts
,** DONE Hello World!
:PROPERTIES:
:EXPORT_FILE_NAME: hello-world
:EXPORT_DATE: <2020-10-29 Thu>
:END:
This is the first of hopefully many posts to come.
...
#+end_src

In the above snippet we can see that the default =HUGO_SECTION= is set to
=posts= resulting in entries being exported to =content/posts/<filename.md>=,
the =Pages= heading overrides this setting, making any of it's sub-headings
instead be exported to =content/pages/<filename.md>=, in addition these entries
will show up in the main menu.

*** Workflow
My usual workflow looks like this:

1. Think of an idea for a new post, use [[https://orgmode.org/manual/Capture.html][Org Capture]] to quickly capture this idea into a new post and save it as a new =TODO= entry under the =Posts= heading in =blog.org=
2. After finishing the post I change it's state to =DONE= which will trigger the =org-hugo-export-to-md= any time I save the post.

Here's the code that adds a Hugo template to Org Capture:
#+begin_src emacs-lisp
(with-eval-after-load 'org-capture
  (defun new-hugo-post (title)
    (s-join "\n" `(,(concat "* TODO " title)
                   ":PROPERTIES:"
                   ,(concat ":EXPORT_FILE_NAME: " (org-hugo-slug title))
                   ":END:"
                   "%?\n")))

  (defun org-hugo-new-subtree-post-capture-template ()
    "Returns `org-capture' template string for new Hugo post. "
    (let* ((title (read-from-minibuffer "Post Title: ")))
      (new-hugo-post title)))

  (add-to-list 'org-capture-templates
               '("h"
                 "Hugo post"
                 entry
                 (file+olp "blog.org" "Posts")
                 (function org-hugo-new-subtree-post-capture-template))))
#+end_src

*** Hosting
I decided to host the on AWS using S3, one of the gotchas I encountered was that
CloudFront does not support returning default root objects in subdirectories and
so links like =example.com/posts/hello-world= does not work. The fix I ended up
using was to assign a lambda function to incoming requests so that requests for
paths that end in =/= are rewritten into =/index.html=

*** Useful packages
I want to mention a few packages that I use to get a more comfortable and
distraction free writing experience. The main one is [[https://github.com/joostkremers/writeroom-mode][writeroom mode]] which adds a
mode for distraction-free writing, the other one is [[https://gitlab.com/jabranham/mixed-pitch][mixed-pitch mode]] which makes
it possible to mix fixed-pitched and variable-pitch fonts in the same buffer.

This is what it ends up looking like:
[[file:./static/images/writeroom.png]]

** TODO A response to Rich Hickey
:PROPERTIES:
:EXPORT_FILE_NAME: a-response-to-rich-hickey
:END:
** TODO Why I no longer get OOP
:PROPERTIES:
:EXPORT_FILE_NAME: why-i-no-longer-get-oop
:END:
*** A short introduction
The first non scripting language I used was C#. Back then I was not aware of the fact that there were this thing called a /programming paradigm/, I just assumed that Object Oriented programming was the type of programming used to write real programs.

A few years passed and LINQ was added to C#, for those not familiar with C#, LINQ is basically an implementation of the list monad together with /expression syntax/ also known as syntactic sugar for bind/flatmap. I remember being really excited over how expressive and declerative the api felt. This was also the first time I was exposed to the ability to pass functions as arguments.

Being really excited about this (to me) "new" style of programming I wanted my write my own libraries using the same style.
After I while read somewhere that functions taking other functions as argument and/or returning functions was something called /Higher order functions/ - something often used in /Functional Programming/ which at the time I had never heard of.

Later I found this book called Functional Programming in C#, in the preface section of the book the author mentioned Haskell. I didn't immediately pick up Haskell but instead I decided to try out F# since it is a dotNET language.

F# however is hybrid language but I tried my hardest to use it like a pure functional language thinking that I already knew OOP so it made little sense to me just writing OOP in F# if I wanted to learn this new paradigm, however there weren't many good resources on how to write pure functional programs using F# and I soon got annoyed by this fact and decided to learn Haskell instead, which I did by reading Haskell Programming From First Principles by Christopher Allen.

*** Why OOP doesn't make sense to me

Let me preface by saying that functional programming is not always the right tool for the job - there are some domains in which fp is not a good fit (luckily I don't work in any of those domains), that said, in the places where FP doesn't shine, OOP is not the solution but procedual is. The procedual paradigm is in my opinion the opposite of FP. For some tasks FP really shines and for others Procedual does - OOP on the other hand  just seems to complicate everything.

No OOP isn't bad per say - it sort of tries to solve the same problems as FP but in my opinion does so in a less elegant and overly complicated way.

Let's take a look at some the features of OOP:

- Classes and Objects
  OOP promises code reuse and extensibility through inheritance.

  #+BEGIN_SRC java
class Animal
{
    private boolean isHungry = true;

    public void Eat()
    {
       isHungry = false;
    }

    public void Walk()
    {
        System.out.println("Walking");
    }
}

class Bird extends Animal
{
    public void Fly()
    {
        System.out.println("Flying");
    }
}

class Dog extends Animal
{
    public void Bark()
    {
        System.out.println("Barking");
    }
}

class Program
{
    static void main(String args[])
    {
        Bird bird = new Bird();
        bird.Walk();
        bird.Eat();
        bird.Fly()
    }
}
  #+END_SRC

 #+BEGIN_SRC haskell
module Animal where

  data Animal = Animal { isHungry :: Boolean }

  walk :: () -> IO ()
  walk = putStrlLn "Walking"

module Bird where
  fly :: () -> IO ()
  fly = putStrLn "Flying"

module Dog where
  bark :: () -> IO ()
  bark = putStrLn "Barking"

module Main where
  main :: IO ()
  main = walk >> fly

 #+END_SRC


So whenever I find myself programming in an OOP language nowadays
#+BEGIN_SRC java
class Thing
{
    private string _x = "";

    string Method(string x) {
        return x + _x;
    }
}
#+END_SRC

#+BEGIN_SRC haskell
#+RESULTS:


** TODO Primitive Obsession
:PROPERTIES:
:EXPORT_FILE_NAME: primitive-obsession
:END:
