#+HUGO_BASE_DIR: ../
#+HUGO_SECTION: posts
#+HUGO_WEIGHT: 2001
#+OPTIONS: tex:t

* Posts
** DONE Hello World!
:PROPERTIES:
:EXPORT_FILE_NAME: hello-world
:EXPORT_DATE: <2020-10-29 Thu>
:END:
This is the first of hopefully many posts to come.

I've come to realise that I spend just about as much time thinking about programming as I do
actually programming. I also love sharing these thoughts with other people, unfortunately I often end up rambling as
I try to say everything at once. By starting a blog I hope to convey my thoughts in a more well thought-out manner.
** DONE Blogging with Emacs Org-mode and ox-hugo :emacs:org:
:PROPERTIES:
:EXPORT_FILE_NAME: blogging-with-org-mode-and-ox-hugo
:EXPORT_DATE: <2020-11-01 Sun>
:END:
*** Workflow and tools
I love Emacs and think it's an amazing piece of software that prefectly captures
the essence of what free software is all about.

One of the most popular packages for emacs is [[https://orgmode.org][Org mode]] which is described as:
#+begin_quote
a mode for keeping notes, maintaining TODO lists, and project planning with a
fast and effective plain-text markup language. It also is an authoring system
with unique support for literate programming and reproducible research.
#+end_quote

And so naturally when I decided to start a blog I wanted to use Emacs and Org mode.
There are a few [[https://orgmode.org/tools.html][tools]] available for blogging with Org mode and I ended up going with [[https://gohugo.io][Hugo]]
and [[https://ox-hugo.scripter.co/][ox-hugo]].

Hugo already has support for Org it is however very limited support and thats
where ox-hugo comes in.
Ox-hugo is an Org exporter backend that exports Org to Hugo-compatible markdown.

So now one might be thinking, why not just use markdown?
The simple answer is: because of Org mode, which is so much more than just editor support for org as a markup language.

Let me give you a few examples:

- You can write snippets of source-code in the middle of an org document and have access to the same intellisense and syntax highlighting you normally would then run those snippets directly using [[https://orgmode.org/worg/org-contrib/babel/][Org-Babel]].

- Org mode also has support for tables and even formulas, no more fiddling with ascii tables manually.

- Use [[https://orgmode.org/manual/Capture.html][Org Capture]] to quickly capture new ideas into a blog post entry and set it's status as =TODO= then later have it be automatically exporterd once it's =DONE=

For a more detailed answer please refer to https://ox-hugo.scripter.co/doc/why-ox-hugo/

Finally there are a couple of modes avialable for emacs that allows for a
comfortable and distraction free writing experience for example [[https://github.com/joostkremers/writeroom-mode][writeroom mode]]
and [[https://gitlab.com/jabranham/mixed-pitch][mixed-pitch mode]]
#+CAPTION: Writeroom mode and mixed-pitch mode
[[file:../static/images/zenmode.png]]

One of Emacs greatest strengths is being able to combine many different tools into one integrated computing environment and this includes Org mode.

*** AWS CloudFront and Hugo
I decided to host the on AWS using S3, one of the gotchas I encountered was that
CloudFront does not support returning default root objects in subdirectories and
so links like =example.com/posts/hello-world= does not work.
The fix I ended up using was to assign a lambda function to incoming requests
so that requests for paths that end in =/= are rewritten into =/index.html=

** TODO A response to Rich Hickey
:PROPERTIES:
:EXPORT_FILE_NAME: a-response-to-rich-hickey
:END:
** TODO Why I no longer get OOP
:PROPERTIES:
:EXPORT_FILE_NAME: why-i-no-longer-get-oop
:END:
*** A short introduction
The first non scripting language I used was C#. Back then I was not aware of the fact that there were this thing called a /programming paradigm/, I just assumed that Object Oriented programming was the type of programming used to write real programs.

A few years passed and LINQ was added to C#, for those not familiar with C#, LINQ is basically an implementation of the list monad together with /expression syntax/ also known as syntactic sugar for bind/flatmap. I remember being really excited over how expressive and declerative the api felt. This was also the first time I was exposed to the ability to pass functions as arguments.

Being really excited about this (to me) "new" style of programming I wanted my write my own libraries using the same style.
After I while read somewhere that functions taking other functions as argument and/or returning functions was something called /Higher order functions/ - something often used in /Functional Programming/ which at the time I had never heard of.

Later I found this book called Functional Programming in C#, in the preface section of the book the author mentioned Haskell. I didn't immediately pick up Haskell but instead I decided to try out F# since it is a dotNET language.

F# however is hybrid language but I tried my hardest to use it like a pure functional language thinking that I already knew OOP so it made little sense to me just writing OOP in F# if I wanted to learn this new paradigm, however there weren't many good resources on how to write pure functional programs using F# and I soon got annoyed by this fact and decided to learn Haskell instead, which I did by reading Haskell Programming From First Principles by Christopher Allen.

*** Why OOP doesn't make sense to me
#+BEGIN_SRC java
class Thing
{
    private string _x = "";

    string Method(string x) {
        return x + _x;
    }
}
#+END_SRC

#+BEGIN_SRC haskell
import Data.IORef
data Thing = Thing { method :: String -> IO String }

kek :: IO String
kek = do
  x1 <- newIORef ""  :: IO (IORef String)
  pure $ Thing $ \x ->
    do
    writeIORef "foo" x1
    x2 <- readIORef x
    pure x2 ++ "!"
  pure x1

main = kek

#+END_SRC

#+RESULTS:
: Prelude> Prelude> Prelude> "foo"



** TODO Primitive Obsession
:PROPERTIES:
:EXPORT_FILE_NAME: primitive-obsession
:END:
